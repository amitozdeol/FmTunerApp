diff -Nur MPlayer-1.0pre7try2/libvo/ivtv.h MPlayer-1.0pre7try2-ivtvosd/libvo/ivtv.h
--- MPlayer-1.0pre7try2/libvo/ivtv.h	1969-12-31 19:00:00.000000000 -0500
+++ MPlayer-1.0pre7try2-ivtvosd/libvo/ivtv.h	2005-10-07 21:51:04.000000000 -0400
@@ -0,0 +1,433 @@
+/*
+    Public ivtv API header
+    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
+
+    VBI portions:
+    Copyright (C) 2004  Hans Verkuil <hverkuil@xs4all.nl>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef _LINUX_IVTV_H
+#define _LINUX_IVTV_H
+
+/* Stream types */
+#define IVTV_STREAM_PS		0
+#define IVTV_STREAM_TS		1
+#define IVTV_STREAM_MPEG1	2
+#define IVTV_STREAM_PES_AV	3
+#define IVTV_STREAM_PES_V	5
+#define IVTV_STREAM_PES_A	7
+#define IVTV_STREAM_DVD		10
+#define IVTV_STREAM_VCD		11
+#define IVTV_STREAM_SVCD	12
+#define IVTV_STREAM_DVD_S1	13
+#define IVTV_STREAM_DVD_S2	14
+
+#define IVTV_YUV_TYPE_HME12		0	/* Hauppauge macro block format */
+#define IVTV_YUV_TYPE_FOURCC_YV12	1
+
+/* device ioctls should use the range 29-199 */
+#define IVTV_IOC_START_DECODE      _IOW ('@', 29, struct ivtv_cfg_start_decode)
+#define IVTV_IOC_STOP_DECODE       _IOW ('@', 30, struct ivtv_cfg_stop_decode)
+#define IVTV_IOC_G_SPEED           _IOR ('@', 31, struct ivtv_speed)
+#define IVTV_IOC_S_SPEED           _IOW ('@', 32, struct ivtv_speed)
+#define IVTV_IOC_DEC_STEP          _IOW ('@', 33, int)
+#define IVTV_IOC_DEC_FLUSH         _IOW ('@', 34, int)
+#define IVTV_IOC_PLAY     	   _IO  ('@', 37)
+#define IVTV_IOC_PAUSE    	   _IO  ('@', 38)
+#define IVTV_IOC_FRAMESYNC	   _IOR ('@', 39, struct ivtv_ioctl_framesync)
+#define IVTV_IOC_GET_TIMING	   _IOR ('@', 40, struct ivtv_ioctl_framesync)
+#define IVTV_IOC_S_SLOW_FAST       _IOW ('@', 41, struct ivtv_slow_fast)
+#define IVTV_IOC_S_START_DECODE    _IOW ('@', 42, struct ivtv_cfg_start_decode)
+#define IVTV_IOC_S_STOP_DECODE     _IOW ('@', 43, struct ivtv_cfg_stop_decode)
+#define IVTV_IOC_GET_FB            _IOR ('@', 44, int)
+#define IVTV_IOC_G_CODEC           _IOR ('@', 48, struct ivtv_ioctl_codec)
+#define IVTV_IOC_S_CODEC           _IOW ('@', 49, struct ivtv_ioctl_codec)
+#define IVTV_IOC_S_GOP_END         _IOWR('@', 50, int)
+#define IVTV_IOC_S_VBI_PASSTHROUGH _IOW ('@', 51, int)
+#define IVTV_IOC_G_VBI_PASSTHROUGH _IOR ('@', 52, int)
+#define IVTV_IOC_PASSTHROUGH       _IOW ('@', 53, int)
+#define IVTV_IOC_S_VBI_EMBED       _IOW ('@', 54, int)
+#define IVTV_IOC_G_VBI_EMBED       _IOR ('@', 55, int)
+#define IVTV_IOC_PAUSE_ENCODE      _IO  ('@', 56)
+#define IVTV_IOC_RESUME_ENCODE     _IO  ('@', 57)
+#define IVTV_IOC_DEC_SPLICE        _IOW ('@', 58, int)
+#define IVTV_IOC_DEC_FAST_STOP     _IOW ('@', 59, int)
+#define IVTV_IOC_PREP_FRAME_YUV    _IOW ('@', 60, struct ivtvyuv_ioctl_dma_host_to_ivtv_args)
+#define IVTV_IOC_G_YUV_INTERLACE   _IOR ('@', 61, struct ivtv_ioctl_yuv_interlace)
+#define IVTV_IOC_S_YUV_INTERLACE   _IOW ('@', 62, struct ivtv_ioctl_yuv_interlace)
+
+// Note: You only append to this structure, you never reorder the members,
+// you never play tricks with its alignment, you never change the size of
+// anything.
+#define IVTV_DRIVER_INFO_MAX_COMMENT_LENGTH 100
+struct ivtv_driver_info {
+	uint32_t size;		// size of this structure
+	uint32_t version;	// version bits 31-16 = major, 15-8 = minor,
+	// 7-0 = patchlevel
+	char comment[IVTV_DRIVER_INFO_MAX_COMMENT_LENGTH];
+        uint32_t cardnr;        // the ivtv card number (0-based)
+        uint32_t hw_flags;      // hardware flags: which chips are used?
+} __attribute__((packed));
+
+#define IVTV_DRIVER_INFO_V1_SIZE 108
+#define IVTV_DRIVER_INFO_V2_SIZE 112
+#define IVTV_DRIVER_INFO_V3_SIZE 116
+
+#define IVTV_IOC_G_DRIVER_INFO _IOWR('@', 100, struct ivtv_driver_info *)
+
+#define IVTV_HW_CX25840  (1 << 0)
+#define IVTV_HW_SAA7115  (1 << 1)
+#define IVTV_HW_SAA7127  (1 << 2)
+#define IVTV_HW_MSP34XX  (1 << 3)
+#define IVTV_HW_TDA9887  (1 << 4)
+#define IVTV_HW_WM8775   (1 << 5)
+#define IVTV_HW_CS53132A (1 << 6)
+#define IVTV_HW_TVEEPROM (1 << 7)
+
+// Version info
+// Note: never use the _INTERNAL versions of these macros
+
+// Internal version macros, don't use these
+#define IVTV_VERSION_NUMBER_INTERNAL(name) name##_version_int
+#define IVTV_VERSION_STRING_INTERNAL(name) name##_version_string
+#define IVTV_VERSION_COMMENT_INTERNAL(name) name##_comment_string
+
+#define IVTV_VERSION_EXTERN_NUMBER_INTERNAL(name) \
+	extern uint32_t IVTV_VERSION_NUMBER_INTERNAL(name)
+#define IVTV_VERSION_EXTERN_STRING_INTERNAL(name) \
+	extern const char * const IVTV_VERSION_STRING_INTERNAL(name)
+#define IVTV_VERSION_EXTERN_COMMENT_INTERNAL(name) \
+	extern const char * const IVTV_VERSION_COMMENT_INTERNAL(name)
+
+#define IVTV_VERSION_MAJOR_INTERNAL(name) \
+	(0xFF & (IVTV_VERSION_NUMBER_INTERNAL(name) >> 16))
+#define IVTV_VERSION_MINOR_INTERNAL(name) \
+	(0xFF & (IVTV_VERSION_NUMBER_INTERNAL(name) >> 8))
+#define IVTV_VERSION_PATCHLEVEL_INTERNAL(name) \
+	(0xFF & (IVTV_VERSION_NUMBER_INTERNAL(name)))
+
+// External version macros
+#define IVTV_VERSION_NUMBER(name) IVTV_VERSION_NUMBER_INTERNAL(name)
+#define IVTV_VERSION_STRING(name) IVTV_VERSION_STRING_INTERNAL(name)
+#define IVTV_VERSION_COMMENT(name) IVTV_VERSION_COMMENT_INTERNAL(name)
+#define IVTV_VERSION_EXTERN_NUMBER(name) \
+	IVTV_VERSION_EXTERN_NUMBER_INTERNAL(name)
+#define IVTV_VERSION_EXTERN_STRING(name) \
+	IVTV_VERSION_EXTERN_STRING_INTERNAL(name)
+#define IVTV_VERSION_EXTERN_COMMENT(name) \
+	IVTV_VERSION_EXTERN_COMMENT_INTERNAL(name)
+
+#define IVTV_VERSION_INFO_NAME ivtv_rev
+
+IVTV_VERSION_EXTERN_NUMBER(IVTV_VERSION_INFO_NAME);
+IVTV_VERSION_EXTERN_STRING(IVTV_VERSION_INFO_NAME);
+IVTV_VERSION_EXTERN_COMMENT(IVTV_VERSION_INFO_NAME);
+
+/* Custom v4l controls */
+#ifndef V4L2_CID_PRIVATE_BASE
+#define V4L2_CID_PRIVATE_BASE			0x08000000
+#endif /* V4L2_CID_PRIVATE_BASE */
+
+#define V4L2_CID_IVTV_FREQ      	(V4L2_CID_PRIVATE_BASE)
+#define V4L2_CID_IVTV_ENC       	(V4L2_CID_PRIVATE_BASE + 1)
+#define V4L2_CID_IVTV_BITRATE   	(V4L2_CID_PRIVATE_BASE + 2)
+#define V4L2_CID_IVTV_MONO      	(V4L2_CID_PRIVATE_BASE + 3)
+#define V4L2_CID_IVTV_JOINT     	(V4L2_CID_PRIVATE_BASE + 4)
+#define V4L2_CID_IVTV_EMPHASIS  	(V4L2_CID_PRIVATE_BASE + 5)
+#define V4L2_CID_IVTV_CRC       	(V4L2_CID_PRIVATE_BASE + 6)
+#define V4L2_CID_IVTV_COPYRIGHT 	(V4L2_CID_PRIVATE_BASE + 7)
+#define V4L2_CID_IVTV_GEN       	(V4L2_CID_PRIVATE_BASE + 8)
+
+#define V4L2_CID_IVTV_DEC_SMOOTH_FF	(V4L2_CID_PRIVATE_BASE + 9)
+#define V4L2_CID_IVTV_DEC_FR_MASK	(V4L2_CID_PRIVATE_BASE + 10)
+#define V4L2_CID_IVTV_DEC_SP_MUTE	(V4L2_CID_PRIVATE_BASE + 11)
+#define V4L2_CID_IVTV_DEC_FR_FIELD	(V4L2_CID_PRIVATE_BASE + 12)
+#define V4L2_CID_IVTV_DEC_AUD_SKIP	(V4L2_CID_PRIVATE_BASE + 13)
+#define V4L2_CID_IVTV_DEC_NUM_BUFFERS	(V4L2_CID_PRIVATE_BASE + 14)
+#define V4L2_CID_IVTV_DEC_PREBUFFER	(V4L2_CID_PRIVATE_BASE + 15)
+
+struct ivtv_ioctl_framesync {
+	uint32_t frame;
+	uint64_t pts;
+	uint64_t scr;
+};
+
+struct ivtv_speed {
+	int scale;		/* 1-?? (50 for now) */
+	int smooth;		/* Smooth mode when in slow/fast mode */
+	int speed;		/* 0 = slow, 1 = fast */
+	int direction;		/* 0 = forward, 1 = reverse (not supportd */
+	int fr_mask;		/* 0 = I, 1 = I,P, 2 = I,P,B    2 = default! */
+	int b_per_gop;		/* frames per GOP (reverse only) */
+	int aud_mute;		/* Mute audio while in slow/fast mode */
+	int fr_field;		/* 1 = show every field, 0 = show every frame */
+	int mute;		/* # of audio frames to mute on playback resume */
+};
+
+struct ivtv_slow_fast {
+	int speed;		/* 0 = slow, 1 = fast */
+	int scale;		/* 1-?? (50 for now) */
+};
+
+struct ivtv_cfg_start_decode {
+	uint32_t gop_offset;	/*Frames in GOP to skip before starting */
+	uint32_t muted_audio_frames;	/* #of audio frames to mute */
+};
+
+struct ivtv_cfg_stop_decode {
+	int hide_last;		/* 1 = show black after stop,
+				   0 = show last frame */
+	uint64_t pts_stop;	/* PTS to stop at */
+};
+
+/* For use with IVTV_IOC_G_CODEC and IVTV_IOC_S_CODEC */
+struct ivtv_ioctl_codec {
+	uint32_t aspect;
+	uint32_t audio_bitmask;
+	uint32_t bframes;
+	uint32_t bitrate_mode;
+	uint32_t bitrate;
+	uint32_t bitrate_peak;
+	uint32_t dnr_mode;
+	uint32_t dnr_spatial;
+	uint32_t dnr_temporal;
+	uint32_t dnr_type;
+	uint32_t framerate;	/* read only, ignored on write */
+	uint32_t framespergop;	/* read only, ignored on write */
+	uint32_t gop_closure;
+	uint32_t pulldown;
+	uint32_t stream_type;
+};
+struct ivtv_ioctl_yuv_interlace{
+	int interlace_mode; /* Takes one of IVTV_YUV_MODE_xxxxxx values */
+	int threshold; /* If mode is auto then if src_height <= this value treat as progressive otherwise treat as interlaced */
+};
+#define IVTV_YUV_MODE_INTERLACED	0
+#define IVTV_YUV_MODE_PROGRESSIVE	1
+#define IVTV_YUV_MODE_AUTO		2
+
+/* Framebuffer external API */
+
+struct ivtvfb_ioctl_state_info {
+	unsigned long status;
+	unsigned long alpha;
+};
+
+struct ivtvfb_ioctl_colorkey {
+    int state;
+    uint32_t colorKey;
+};
+
+struct ivtvfb_ioctl_blt_copy_args {
+	int x, y, width, height, source_offset, source_stride;
+};
+
+struct ivtvfb_ioctl_blt_fill_args {
+	int rasterop, alpha_mode, alpha_mask, width, height, x, y;
+	unsigned int destPixelMask, colour;
+
+};
+
+struct ivtvfb_ioctl_dma_host_to_ivtv_args {
+	void *source;
+	unsigned long dest_offset;
+	int count;
+};
+
+struct ivtvyuv_ioctl_dma_host_to_ivtv_args {
+	void *y_source;
+	void *uv_source;
+	unsigned int yuv_type;
+	int src_x;
+	int src_y;
+	unsigned int src_w;
+	unsigned int src_h;
+	int dst_x;
+	int dst_y;
+	unsigned int dst_w;
+	unsigned int dst_h;
+	int srcBuf_width;
+	int srcBuf_height;
+};
+
+struct ivtvfb_ioctl_get_frame_buffer {
+	void *mem;
+	int size;
+	int sizex;
+	int sizey;
+};
+
+struct ivtv_osd_coords {
+	unsigned long offset;
+	unsigned long max_offset;
+	int pixel_stride;
+	int lines;
+	int x;
+	int y;
+};
+
+struct rectangle {
+	int x0;
+	int y0;
+	int x1;
+	int y1;
+};
+
+struct ivtvfb_ioctl_set_window {
+	int width;
+	int height;
+	int left;
+	int top;
+};
+
+
+
+/* Framebuffer ioctls should use the range 1 - 28 */
+#define IVTVFB_IOCTL_GET_STATE          _IOR('@', 1, struct ivtvfb_ioctl_state_info)
+#define IVTVFB_IOCTL_SET_STATE          _IOW('@', 2, struct ivtvfb_ioctl_state_info)
+#define IVTVFB_IOCTL_PREP_FRAME         _IOW('@', 3, struct ivtvfb_ioctl_dma_host_to_ivtv_args)
+#define IVTVFB_IOCTL_BLT_COPY           _IOW('@', 4, struct ivtvfb_ioctl_blt_copy_args)
+#define IVTVFB_IOCTL_GET_ACTIVE_BUFFER  _IOR('@', 5, struct ivtv_osd_coords)
+#define IVTVFB_IOCTL_SET_ACTIVE_BUFFER  _IOW('@', 6, struct ivtv_osd_coords)
+#define IVTVFB_IOCTL_GET_FRAME_BUFFER   _IOR('@', 7, struct ivtvfb_ioctl_get_frame_buffer)
+#define IVTVFB_IOCTL_BLT_FILL           _IOW('@', 8, struct ivtvfb_ioctl_blt_fill_args)
+#define IVTVFB_IOCTL_PREP_FRAME_BUF     _IOW('@', 9, struct ivtvfb_ioctl_dma_host_to_ivtv_args)
+#define IVTVFB_IOCTL_SET_WINDOW         _IOW('@', 11, struct ivtvfb_ioctl_set_window)
+#define IVTVFB_IOCTL_GET_COLORKEY       _IOW('@', 12, struct ivtvfb_ioctl_colorkey)
+#define IVTVFB_IOCTL_SET_COLORKEY       _IOW('@', 13, struct ivtvfb_ioctl_colorkey)
+
+#define IVTVFB_STATUS_ENABLED           (1 << 0)
+#define IVTVFB_STATUS_GLOBAL_ALPHA      (1 << 1)
+#define IVTVFB_STATUS_LOCAL_ALPHA       (1 << 2)
+#define IVTVFB_STATUS_FLICKER_REDUCTION (1 << 3)
+
+#ifdef IVTV_INTERNAL
+/* Do not use these structures and ioctls in code that you want to release.
+   Only to be used for testing and by the utilities ivtvctl, ivtvfbctl and fwapi. */
+
+/* These are the VBI types as they appear in the embedded VBI private packets.
+   It is very likely that this will disappear and be replaced by the DVB standard. */
+#define IVTV_SLICED_TYPE_TELETEXT_B     (1)
+#define IVTV_SLICED_TYPE_CAPTION_525    (4)
+#define IVTV_SLICED_TYPE_WSS_625        (5)
+#define IVTV_SLICED_TYPE_VPS            (7)
+
+#define IVTV_ENC_STREAM_TYPE_MPG 0
+#define IVTV_ENC_STREAM_TYPE_YUV 1
+#define IVTV_ENC_STREAM_TYPE_VBI 2
+#define IVTV_ENC_STREAM_TYPE_PCM 3
+#define IVTV_ENC_STREAM_TYPE_RAD 4
+#define IVTV_DEC_STREAM_TYPE_MPG 5
+#define IVTV_DEC_STREAM_TYPE_VBI 6
+#define IVTV_DEC_STREAM_TYPE_VOUT 7
+#define IVTV_DEC_STREAM_TYPE_YUV 8
+#define IVTV_DEC_STREAM_TYPE_OSD 9
+
+struct ivtv_stream_info {
+        uint32_t size;
+        uint32_t type;
+} __attribute__((packed));
+
+#define IVTV_STREAM_INFO_V1_SIZE 8
+#define IVTV_IOC_G_STREAM_INFO _IOWR('@', 101, struct ivtv_stream_info *)
+
+#define IVTV_MBOX_MAX_DATA 16
+
+struct ivtv_ioctl_fwapi {
+	uint32_t cmd;
+	uint32_t result;
+	int32_t args;
+	uint32_t data[IVTV_MBOX_MAX_DATA];
+};
+
+struct ivtv_ioctl_event {
+	uint32_t type;
+	uint32_t mbox;
+	struct ivtv_ioctl_fwapi api;
+};
+
+struct ivtv_saa71xx_reg {
+	uint32_t reg;
+	uint32_t val;
+};
+
+struct ivtv_itvc_reg {
+	uint32_t reg;
+	uint32_t val;
+};
+
+struct ivtv_msp_matrix {
+	int input;
+	int output;
+};
+
+/* Debug flags */
+#define IVTV_DBGFLG_WARN  (1 << 0)
+#define IVTV_DBGFLG_INFO  (1 << 1)
+#define IVTV_DBGFLG_API   (1 << 2)
+#define IVTV_DBGFLG_DMA   (1 << 3)
+#define IVTV_DBGFLG_IOCTL (1 << 4)
+#define IVTV_DBGFLG_I2C   (1 << 5)
+#define IVTV_DBGFLG_IRQ   (1 << 6)
+#define IVTV_DBGFLG_DEC   (1 << 7)
+#define IVTV_DBGFLG_YUV   (1 << 8)
+
+/* BLT RasterOps */
+#define IVTV_BLT_RASTER_ZERO		0
+#define IVTV_BLT_RASTER_NOTDEST_AND_NOTSRC	1
+#define IVTV_BLT_RASTER_NOTDEST_AND_SRC	2
+#define IVTV_BLT_RASTER_NOTDEST		3
+#define IVTV_BLT_RASTER_DEST_AND_NOTSRC	4
+#define IVTV_BLT_RASTER_NOTSRC		5
+#define IVTV_BLT_RASTER_DEST_XOR_SRC	6
+#define IVTV_BLT_RASTER_NOTDEST_OR_NOTSRC	7
+													    /* #define IVTV_BLT_RASTER_NOTDEST_AND_NOTSRC      8 *//* Same as 1 */
+#define IVTV_BLT_RASTER_DEST_XNOR_SRC	9
+#define IVTV_BLT_RASTER_SRC			10
+#define IVTV_BLT_RASTER_NOTDEST_OR_SRC	11
+#define IVTV_BLT_RASTER_DEST		12
+#define IVTV_BLT_RASTER_DEST_OR_NOTSRC	13
+#define IVTV_BLT_RASTER_DEST_OR_SRC		14
+#define IVTV_BLT_RASTER_ONE			15
+
+/* BLT Alpha blending */
+
+#define IVTV_BLT_ALPHABLEND_SRC		0x01
+#define IVTV_BLT_ALPHABLEND_DEST	0x10
+#define IVTV_BLT_ALPHABLEND_DEST_X_SRC	0x11	/* dest x src +1 , = zero if both zero */
+
+/* Internal ioctls should use the range 200-255 */
+#define IVTV_IOC_S_DEBUG_LEVEL     _IOWR('@', 200, int)
+#define IVTV_IOC_G_DEBUG_LEVEL     _IOR ('@', 201, int)
+#define IVTV_IOC_RELOAD_FW         _IO  ('@', 202)
+#define IVTV_IOC_ZCOUNT            _IO  ('@', 203)
+#define IVTV_IOC_FWAPI             _IOWR('@', 204, struct ivtv_ioctl_fwapi)
+#define IVTV_IOC_EVENT_SETUP       _IOWR('@', 205, struct ivtv_ioctl_event)
+#define IVTV_IOC_G_SAA7115_REG     _IOWR('@', 206, struct ivtv_saa71xx_reg)
+#define IVTV_IOC_S_SAA7115_REG     _IOW ('@', 207, struct ivtv_saa71xx_reg)
+#define IVTV_IOC_G_SAA7127_REG     _IOWR('@', 208, struct ivtv_saa71xx_reg)
+#define IVTV_IOC_S_SAA7127_REG     _IOW ('@', 209, struct ivtv_saa71xx_reg)
+#define IVTV_IOC_S_MSP_MATRIX      _IOW ('@', 210, struct ivtv_msp_matrix)
+#define IVTV_IOC_G_ITVC_REG        _IOWR('@', 211, struct ivtv_itvc_reg)
+#define IVTV_IOC_S_ITVC_REG        _IOW ('@', 212, struct ivtv_itvc_reg)
+#define IVTV_IOC_G_VIDEO_STATUS    _IOR ('@', 213, int *)
+#define IVTV_IOC_RESET_IR          _IO  ('@', 214)
+#define IVTV_IOC_LOG_BOARD_STATUS  _IO  ('@', 215)
+
+#endif /* IVTV_INTERNAL */
+
+#endif /* _LINUX_IVTV_H */
diff -Nur MPlayer-1.0pre7try2/libvo/Makefile MPlayer-1.0pre7try2-ivtvosd/libvo/Makefile
--- MPlayer-1.0pre7try2/libvo/Makefile	2004-10-23 18:43:19.000000000 -0400
+++ MPlayer-1.0pre7try2-ivtvosd/libvo/Makefile	2005-10-07 21:40:06.000000000 -0400
@@ -3,7 +3,7 @@
 
 LIBNAME = libvo.a
 
-SRCS=geometry.c aspect.c aclib.c osd.c font_load.c gtf.c spuenc.c video_out.c vo_null.c vo_mpegpes.c vo_yuv4mpeg.c $(OPTIONAL_SRCS) sub.c font_load_ft.c
+SRCS=geometry.c aspect.c aclib.c vo_ivtvosd.c osd.c font_load.c gtf.c spuenc.c video_out.c vo_null.c vo_mpegpes.c vo_ivtv.c vo_yuv4mpeg.c $(OPTIONAL_SRCS) sub.c font_load_ft.c
 OBJS=$(SRCS:.c=.o)
 
 ifeq ($(VIDIX),yes)
diff -Nur MPlayer-1.0pre7try2/libvo/video_out.c MPlayer-1.0pre7try2-ivtvosd/libvo/video_out.c
--- MPlayer-1.0pre7try2/libvo/video_out.c	2004-12-21 15:33:51.000000000 -0500
+++ MPlayer-1.0pre7try2-ivtvosd/libvo/video_out.c	2005-10-07 21:38:11.000000000 -0400
@@ -86,7 +86,9 @@
 extern vo_functions_t video_out_aa;
 extern vo_functions_t video_out_caca;
 extern vo_functions_t video_out_mpegpes;
+extern vo_functions_t video_out_ivtv;
 extern vo_functions_t video_out_yuv4mpeg;
+extern vo_functions_t video_out_ivtvosd;
 #ifdef HAVE_DIRECTX
 extern vo_functions_t video_out_directx;
 #endif
@@ -132,6 +134,7 @@
 
 vo_functions_t* video_out_drivers[] =
 {
+	&video_out_ivtvosd,
 #ifdef HAVE_TDFX_VID
         &video_out_tdfx_vid,
 #endif
@@ -229,6 +232,7 @@
         &video_out_null,
 	// should not be auto-selected
 	&video_out_mpegpes,
+	&video_out_ivtv,
 	&video_out_yuv4mpeg,
 #ifdef HAVE_PNG
 	&video_out_png,
diff -Nur MPlayer-1.0pre7try2/libvo/vo_ivtv.c MPlayer-1.0pre7try2-ivtvosd/libvo/vo_ivtv.c
--- MPlayer-1.0pre7try2/libvo/vo_ivtv.c	1969-12-31 19:00:00.000000000 -0500
+++ MPlayer-1.0pre7try2-ivtvosd/libvo/vo_ivtv.c	2005-10-07 21:38:11.000000000 -0400
@@ -0,0 +1,226 @@
+// Don't change for DVB card, it must be 2048
+#define PES_MAX_SIZE 2048
+
+/* 
+ * Based on:
+ *
+ * test_av.c - Test program for new API
+ *
+ * Copyright (C) 2000 Ralph  Metzler <ralph@xxxxxxxxxxxxxx>
+ *                  & Marcus Metzler <marcus@xxxxxxxxxxxxxx>
+ *                    for convergence integrated media GmbH
+ *
+ * libav - MPEG-PS multiplexer, part of ffmpeg
+ * Copyright Gerard Lantau  (see http://ffmpeg.sf.net)
+ *
+ */
+
+#include "config.h"
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#include "mp_msg.h"
+
+#include "config.h"
+#include "video_out.h"
+#include "video_out_internal.h"
+#include "ivtv.h"
+#include <linux/ioctl.h>
+
+int vo_ivtv_fd=-1;
+//int vo_ivtv_fd2=-1;
+
+static vo_info_t info = 
+{
+	"IVTV-Mpeg file",
+	"ivtv",
+	"A'rpi",
+	""
+};
+
+char ivtvbuf[65536*4];
+int  ivtvlen = 0;
+char ivtvbuf2[65536*4];
+int  ivtvlen2 = 0;
+
+LIBVO_EXTERN (ivtv)
+
+static int int_pause;
+static uint32_t
+config(uint32_t s_width, uint32_t s_height, uint32_t width, uint32_t height, uint32_t fullscreen, char *title, uint32_t format)
+{
+//printf("config\n");
+    return 0;
+}
+
+static uint32_t preinit(const char *arg){
+//printf("preinit\n");
+    vo_ivtv_fd=open(arg ? arg : "/dev/video16",O_RDWR);
+    if(vo_ivtv_fd<0){	
+	perror("vo_ivtv");
+	return -1;
+    }
+    //vo_ivtv_fd2=vo_ivtv_fd;
+    return 0;
+}
+
+
+static void draw_osd(void)
+{
+//printf("draw_osd\n");
+}
+
+static int ivtv_write(void){
+//printf("ivtv_write\n");
+       int wrote,curlen;
+       if (ivtvlen > 0) {
+          char * ivtvbuf_ptr = &ivtvbuf[0];
+          curlen = ivtvlen;
+          
+       
+          while (curlen > 0) {
+             wrote=write(vo_ivtv_fd,ivtvbuf_ptr,curlen);
+             ivtvbuf_ptr = ivtvbuf_ptr + wrote;
+             curlen -= wrote;
+          }
+       }
+       return 0;
+}
+
+static uint32_t draw_frame(uint8_t * src[])
+{
+//printf("draw_frame\n");
+    vo_mpegpes_t *p=(vo_mpegpes_t *)src[0];
+    memcpy(&ivtvbuf[0], p->data, p->size);
+    ivtvlen = p->size;
+    return 0;
+}
+
+static void flip_page (void)
+{
+//printf("flip_page\n");
+    ivtv_write();
+}
+
+static uint32_t reset_ivtv (int blank_scrn)
+{
+//printf("reset_ivtv\n");
+   struct ivtv_cfg_stop_decode sd;
+   sd.hide_last = blank_scrn;
+   sd.pts_stop = 0;
+   struct ivtv_cfg_start_decode sd1;
+   sd1.gop_offset = 0;
+   sd1.muted_audio_frames = 0;
+  
+   //if (!blank_scrn)
+    //  ivtvlen = 0;
+   //if (blank_scrn)
+      //ivtvlen2 = 0;
+
+   while (ioctl(vo_ivtv_fd,IVTV_IOC_STOP_DECODE, &sd) < 0){
+      if (errno != EBUSY){
+         perror("IVTV_IOC_STOP_DECODE: ");
+         return 1;
+      }
+   }
+   while (ioctl(vo_ivtv_fd,IVTV_IOC_DEC_FLUSH, 0) < 0){
+      if (errno != EBUSY){
+         perror("IVTV_IOC_DEC_FLUSH: ");
+         return 1;
+      }
+   }
+   while (ioctl(vo_ivtv_fd,IVTV_IOC_START_DECODE, &sd1) < 0){
+      if (errno != EBUSY){
+         perror("IVTV_IOC_START_DECODE: ");
+         return 1;
+      }
+   }
+   //uninit();
+   //preinit((const char *) NULL);
+   return 0;
+
+}
+
+static uint32_t draw_slice(uint8_t *srcimg[], int stride[], int w,int h,int x0,int y0)
+{
+//printf("draw_slice\n");
+    return 0;
+}
+
+
+static uint32_t
+query_format(uint32_t format)
+{
+//printf("query_format\n");
+    if(format==IMGFMT_MPEGPES) return 3|VFCAP_TIMER;
+    return 0;
+}
+
+static void
+uninit(void)
+{
+//printf("uninit\n");
+    //if(vo_ivtv_fd2>=0 && vo_ivtv_fd2!=vo_ivtv_fd) close(vo_ivtv_fd2);
+    //vo_ivtv_fd2=-1;
+    if(vo_ivtv_fd>=0){ close(vo_ivtv_fd);vo_ivtv_fd=-1;}
+}
+
+
+static void check_events(void)
+{
+//printf("check_events\n");
+}
+
+static uint32_t control(uint32_t request, void *data, ...)
+{
+//printf("control\n");
+//printf("request = %d\n",request);
+  switch (request) {
+  case VOCTRL_PAUSE: 
+  {
+     //printf("pausing\n");
+     reset_ivtv(0);
+     //while (ioctl(vo_ivtv_fd,IVTV_IOC_PAUSE, 0) < 0){
+     //if (ioctl(vo_ivtv_fd,IVTV_IOC_PAUSE, 0) < 0){
+      //  if (errno != EBUSY){
+       //    perror("IVTV_IOC_PAUSE: ");
+        //   break;
+        //}
+     //}
+     return (int_pause=1);
+  }
+  
+  case VOCTRL_RESUME: 
+  {
+     //printf("resuming\n");
+     reset_ivtv(0);
+     //while (ioctl(vo_ivtv_fd,IVTV_IOC_PLAY, 0) < 0){
+     //if (ioctl(vo_ivtv_fd,IVTV_IOC_PLAY, 0) < 0){
+     //   if (errno != EBUSY){
+     //      perror("IVTV_IOC_PLAY: ");
+     //      break;
+     //   }
+     //}
+     return (int_pause=0);
+  }
+
+  case VOCTRL_RESET: 
+     return reset_ivtv(1);
+
+  case VOCTRL_DUPLICATE_FRAME:
+  {
+    flip_page();
+    return VO_TRUE;
+  }
+
+  case VOCTRL_QUERY_FORMAT:
+    return query_format(*((uint32_t*)data));
+  }
+  return VO_NOTIMPL;
+}
diff -Nur MPlayer-1.0pre7try2/libvo/vo_ivtvosd.c MPlayer-1.0pre7try2-ivtvosd/libvo/vo_ivtvosd.c
--- MPlayer-1.0pre7try2/libvo/vo_ivtvosd.c	1969-12-31 19:00:00.000000000 -0500
+++ MPlayer-1.0pre7try2-ivtvosd/libvo/vo_ivtvosd.c	2005-10-07 21:38:11.000000000 -0400
@@ -0,0 +1,311 @@
+/* 
+ * vo_ivtvosd.c, IVTV OSD Renderer for Mplayer
+ *
+ * Copyright 2002 by Pontscho (pontscho@makacs.poliod.hu)
+ * 25/04/2003: Spring cleanup -- alex
+ * 
+ *
+ * Chris Kennedy, 2004
+ *
+ * 09/07/2004: Big ugly hack for getting OSD/menu/subtitles to work - haakon@visbook.no 
+ *             (mostly copied from vo_fbdev.c)
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <linux/ioctl.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include "mp_msg.h"
+#include <linux/fb.h>
+
+#include <sys/mman.h>
+
+#include "config.h"
+#include "video_out.h"
+#include "video_out_internal.h"
+
+#define FB_DEV "/dev/fb0"
+
+char *ivtvfb_dev_name = NULL;
+
+static uint32_t ivtvosd_write(uint8_t * buffer);
+static uint32_t ivtv_display(int fh, void *fb, int offset, int size);
+
+static int fb_line_len;
+static int fb_tty_fd = -1;
+char *ivtvfb_mode_cfgfile = NULL;
+static int fb_dev_fd;
+static size_t fb_size;
+static int fb_bpp;		// 32: 32  24: 24  16: 16  15: 15
+static int fb_bpp_we_want;	// 32: 32  24: 24  16: 16  15: 15
+static int fb_pixel_size;	// 32:  4  24:  3  16:  2  15:  2
+static uint8_t *frame_buffer;
+static int center;	/* thx .so :) */
+static struct fb_fix_screeninfo fb_finfo;
+static struct fb_var_screeninfo fb_orig_vinfo;
+static struct fb_var_screeninfo fb_vinfo;
+static void (*draw_alpha_p)(int w, int h, unsigned char *src,
+			                    unsigned char *srca, int stride, unsigned char *dst,
+			                    int dstride);
+
+static vo_info_t info=
+{
+	"IVTV OSD",
+	"ivtvosd",
+	"Chris Kennedy (c@groovy.org)",
+	""
+};
+
+LIBVO_EXTERN (ivtvosd)
+
+static int image_width;
+static int image_height;
+
+static int framenum=0;
+
+
+
+static uint32_t config(uint32_t width, uint32_t height, uint32_t d_width, uint32_t d_height, uint32_t fullscreen, char *title, uint32_t format)
+{
+     image_height=height;
+     image_width=width;
+
+     // Added by haakon
+     fb_pixel_size = fb_vinfo.bits_per_pixel / 8;
+     fb_bpp = fb_vinfo.red.length + fb_vinfo.green.length +
+       fb_vinfo.blue.length + fb_vinfo.transp.length;
+     
+     switch (fb_bpp) {
+     case 32: draw_alpha_p = vo_draw_alpha_rgb32; break;
+     case 24: draw_alpha_p = vo_draw_alpha_rgb24; break;
+     case 16: draw_alpha_p = vo_draw_alpha_rgb16; break;
+     case 15: draw_alpha_p = vo_draw_alpha_rgb15; break;
+     default: return 1;
+     }
+     
+     if (ioctl(fb_dev_fd, FBIOGET_FSCREENINFO, &fb_finfo)) {
+       mp_msg(MSGT_VO, MSGL_ERR, "Can't get FSCREENINFO: %s\n", strerror(errno));
+       return 1;
+     }
+     
+     fb_line_len = fb_finfo.line_length;
+     fb_size = fb_finfo.smem_len;
+     frame_buffer = NULL;
+     {
+       fprintf(stderr, "fb_size=%d fb_dev_fd=%d\n", fb_size, fb_dev_fd);
+       int x_offset=0,y_offset=0;
+       if ((frame_buffer = (uint8_t *) mmap(0, fb_size, PROT_READ | PROT_WRITE,
+					    MAP_SHARED, fb_dev_fd, 0)) == (uint8_t *) -1) {
+	 mp_msg(MSGT_VO, MSGL_ERR, "Can't mmap %s: %s\n", ivtvfb_dev_name, strerror(errno));
+	 //return 1;
+       }
+       /*
+	 center = frame_buffer + (out_width - image_width) * fb_pixel_size /
+	 2 + ( (out_height - image_height) / 2 ) * fb_line_len +
+	 x_offset * fb_pixel_size + y_offset * fb_line_len;
+       */
+       center = fb_pixel_size / 2 * fb_line_len +
+	 x_offset * fb_pixel_size + y_offset * fb_line_len;
+       mp_msg(MSGT_VO, MSGL_V, "frame_buffer @ %p\n", frame_buffer);
+       mp_msg(MSGT_VO, MSGL_V, "center @ %p\n", center);
+       mp_msg(MSGT_VO, MSGL_V, "pixel per line: %d\n", fb_line_len / fb_pixel_size);
+       /*
+	 if (fs || vm)
+	 memset(frame_buffer, '\0', fb_line_len * fb_yres);
+       */
+     }
+     return 0;
+}
+
+
+
+static int fb_preinit(int reset)
+{
+	static int fb_preinit_done = 0;
+	static int fb_works = 0;
+
+	if (reset)
+	{
+	    fb_preinit_done = 0;
+	    return 0;
+	}
+
+	if (fb_preinit_done)
+		return fb_works;
+
+	if (!ivtvfb_dev_name && !(ivtvfb_dev_name = getenv("FRAMEBUFFER")))
+		ivtvfb_dev_name = strdup("/dev/fb0");
+	mp_msg(MSGT_VO, MSGL_V, "using %s\n", ivtvfb_dev_name);
+
+	if ((fb_dev_fd = open(ivtvfb_dev_name, O_RDWR)) == -1) {
+		mp_msg(MSGT_VO, MSGL_ERR, "Can't open %s: %s\n", ivtvfb_dev_name, strerror(errno));
+		goto err_out;
+	}
+	if (ioctl(fb_dev_fd, FBIOGET_VSCREENINFO, &fb_vinfo)) {
+		mp_msg(MSGT_VO, MSGL_ERR, "Can't get VSCREENINFO: %s\n", strerror(errno));
+		goto err_out_fd;
+	}
+	fb_orig_vinfo = fb_vinfo;
+
+        if ((fb_tty_fd = open("/dev/tty", O_RDWR)) < 0) {
+                mp_msg(MSGT_VO, MSGL_ERR, "notice: Can't open /dev/tty: %s\n", strerror(errno));
+        }
+
+	fb_bpp = fb_vinfo.red.length + fb_vinfo.green.length +
+		fb_vinfo.blue.length + fb_vinfo.transp.length;
+
+	if (fb_bpp == 8 && !vo_dbpp) {
+		mp_msg(MSGT_VO, MSGL_ERR, "8 bpp output is not supported.\n");
+		goto err_out_tty_fd;
+	}
+
+	if (vo_dbpp) {
+		if (vo_dbpp != 15 && vo_dbpp != 16 && vo_dbpp != 24 &&
+				vo_dbpp != 32) {
+			mp_msg(MSGT_VO, MSGL_ERR, "can't switch to %d bpp\n", vo_dbpp);
+			goto err_out_fd;
+		}
+		fb_bpp = vo_dbpp;		
+	}
+	
+	if (!ivtvfb_mode_cfgfile)
+	    ivtvfb_mode_cfgfile = strdup("/etc/fb.modes");
+
+	fb_preinit_done = 1;
+	fb_works = 1;
+	return 1;
+err_out_tty_fd:
+        close(fb_tty_fd);
+        fb_tty_fd = -1;
+err_out_fd:
+	close(fb_dev_fd);
+	fb_dev_fd = -1;
+err_out:
+	fb_preinit_done = 1;
+	fb_works = 0;
+	return 0;
+}
+
+
+static char *srcbuffer = NULL; 
+static int sub = 0;
+
+static void draw_alpha(int x0, int y0, int w, int h, unsigned char *src,
+		                       unsigned char *srca, int stride)
+{
+   
+           unsigned char *dst;
+           dst = (srcbuffer + center) + (fb_line_len * y0 + x0); // * fb_pixel_size;
+	   if (srcbuffer != NULL) {
+	     (*draw_alpha_p)(w, h, src, srca, stride, dst, fb_line_len);
+	     ivtvosd_write(srcbuffer);
+	     sub = 1;
+	   }
+}
+
+struct ivtvfb_ioctl_dma_host_to_ivtv_args {
+        void* source;
+        unsigned long dest_offset;
+        int count;
+};
+
+static uint32_t ivtvosd_write(uint8_t * buffer)
+{
+  int fh;
+  unsigned long size;
+  char *addr = buffer;
+  srcbuffer = buffer;
+  int offset = 0;
+  int increment = ((image_width * image_height * 4)/2);
+
+  if (sub) {
+    sub = 0;
+    return 0;
+  }
+  size = (image_width * image_height * 4);
+
+  /* Framebuffer DMA */
+  while (offset < size) {
+       ivtv_display(fb_dev_fd, (void *)addr, offset, increment);
+
+       offset += increment;
+       /* reduce to correct size if last DMA */
+       if ((offset+increment) > size)
+               increment = (size-offset);
+  }
+
+  return 0;
+}
+
+#define IVTVFB_IOCTL_PREP_FRAME         _IOW('@', 9, struct ivtvfb_ioctl_dma_host_to_ivtv_args)
+
+static uint32_t ivtv_display(int fh, void *fb, int offset, int size)
+{
+        struct ivtvfb_ioctl_dma_host_to_ivtv_args args;
+
+        args.source = (fb+offset);
+        args.dest_offset = offset;
+        args.count = size;
+
+        if(-1 == ioctl(fh, IVTVFB_IOCTL_PREP_FRAME, (void*)(&args))) {
+                fprintf(stderr, "Error with sending DMA to ivtv FB! %s\n",
+                        strerror(errno));
+                return 1;
+        }
+        return 0;
+}
+
+static uint32_t draw_frame(uint8_t * src[])
+{
+ return ivtvosd_write(src[0]);
+}
+
+static void draw_osd(void)
+{
+   vo_draw_text(image_width, image_height, draw_alpha);
+}
+
+static void flip_page (void)
+{
+}
+
+static uint32_t draw_slice( uint8_t *src[],int stride[],int w,int h,int x,int y )
+{
+  return 0;
+}
+
+static uint32_t query_format(uint32_t format)
+{
+    if (!fb_preinit(0))
+            return 0;
+    if (format == IMGFMT_RGB32)
+	    return VFCAP_CSP_SUPPORTED|VFCAP_CSP_SUPPORTED_BY_HW;
+
+    return 0;
+}
+
+static void uninit(void)
+{
+}
+
+static void check_events(void)
+{
+}
+
+static uint32_t preinit(const char *arg)
+{
+ return 0;
+}
+
+static uint32_t control(uint32_t request, void *data, ...)
+{
+ switch (request) 
+  {
+   case VOCTRL_QUERY_FORMAT:
+        return query_format(*((uint32_t*)data));
+  }
+ return VO_NOTIMPL;
+}
diff -Nur MPlayer-1.0pre7try2/mplayer.c MPlayer-1.0pre7try2-ivtvosd/mplayer.c
--- MPlayer-1.0pre7try2/mplayer.c	2005-04-15 08:14:24.000000000 -0400
+++ MPlayer-1.0pre7try2-ivtvosd/mplayer.c	2005-10-07 21:38:11.000000000 -0400
@@ -2443,7 +2443,7 @@
 time_frame/=playback_speed;
 
 // flag 256 means: libvo driver does its timing (dvb card)
-if(time_frame>0.001 && !(vo_flags&256)){
+//if(time_frame>0.001 && !(vo_flags&256)){
 
 #ifdef HAVE_RTC
     if(rtc_fd>=0){
@@ -2475,7 +2475,7 @@
 	}
     }
 
-}
+//}
 
 //if(!frame_time_remaining){	// should we display the frame now?
 
